import type { NextPage } from 'next';
import Head from 'next/head';
import { MouseEvent, useMemo, useEffect, useRef, useState } from 'react';
import Controls from '../components/Controls';
import ExtraControls from '../components/ExtraControls';
import Logo from '../components/Logo';
import { tools, ToolState } from '../helper/tools';

const Home: NextPage = () => {
  const [activeTool, setTool] = useState<ToolState>();
  const [drawing, setDrawing] = useState(false);

  const action = useMemo(() => {
    return tools.find((tool) => tool.title === activeTool)?.action;
  }, [activeTool]);

  const canvasRef = useRef<HTMLCanvasElement>(null);
  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    canvas.style.width = `${canvas.clientWidth}px`;
    canvas.style.height = `${canvas.clientHeight}px`;
    canvas.width = canvas.clientWidth * 2;
    canvas.height = canvas.clientHeight * 2;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    ctx.scale(2, 2);
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 5;
    ctxRef.current = canvas.getContext('2d');
  }, []);

  const start = (event: MouseEvent<HTMLCanvasElement>) => {
    const { offsetX, offsetY } = event.nativeEvent;
    if (!ctxRef.current || !action) return;

    action.start(ctxRef.current, offsetX, offsetY);
    setDrawing(true);
  };
  const draw = (event: MouseEvent<HTMLCanvasElement>) => {
    const { offsetX, offsetY } = event.nativeEvent;
    if (!ctxRef.current || !action || !drawing) return;

    action.draw(ctxRef.current, offsetX, offsetY);
  };
  const end = (event: MouseEvent<HTMLCanvasElement>) => {
    if (!ctxRef.current || !action) return;

    action.end(ctxRef.current);
    setDrawing(false);
  };

  return (
    <div>
      <Head>
        <title>Drawing thing</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen transition-colors duration-500 dark:bg-zinc-900'>
        <aside className='flex flex-col items-center gap-4 p-2 py-4 shadow-lg shadow-black/50 dark:bg-zinc-800/75 dark:shadow-transparent'>
          <a href='https://github.com/volodymyr-havryliuk165' target='blank'>
            <Logo className=' hover:text-rose-600' />
          </a>
          <Controls tool={activeTool} setter={setTool} />
        </aside>
        <div className='flex grow'>
          <canvas
            ref={canvasRef}
            onMouseDown={start}
            onMouseMove={draw}
            onMouseUp={end}
          />
        </div>
        <aside>
          <ExtraControls />
        </aside>
      </main>
    </div>
  );
};

export default Home;
